global(VERSION_saker.msvc) = "0.8.0"
global(DEPENDENCIES_saker.msvc) = [
	saker.standard, 
	saker.compiler.utils,
	saker.sdk.support,
]

static(VERSION_saker.build) = nest.dependency.resolve(
	saker.build,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]
static(VERSION_saker.nest) = nest.dependency.resolve(
	saker.nest,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]

compile(
	in testapicompile = include(_testapicompile),
	out javac,
	out procjavac,
	out procdllpaths,
) {
	$resolveddependencies = nest.dependency.resolve(
		global(DEPENDENCIES_saker.msvc),
		Filters: nest.dependency.filter.compile(CompileTransitive: false)
	)
	$procjavac = saker.java.compile(
		SourceDirectories: proc/src/java/,
		ClassPath: [
			saker.java.classpath.bundle([
				"saker.build-api-v{ static(VERSION_saker.build) }",
			]),
		],
		Identifier: proc,
		GenerateNativeHeaders: true,
	)
	$javac = saker.java.compile(
		SourceDirectories: [
			src/main/
		],
		ClassPath: [
			saker.java.classpath.bundle([
				"saker.nest-api-v{ static(VERSION_saker.nest) }"
			]),
			saker.java.classpath.bundle($resolveddependencies),
			$testapicompile[javac],
			$procjavac,
		],
		Identifier: "saker.msvc{ $testapicompile[enabled] ? "-testing" : "" }",	
	)
	$procdllpaths = foreach $target in [{ arch: x64, id: amd64 }, { arch: x86, id: x86}]
		with $ccompile, $clink {
		$ccompile = saker.msvc.ccompile(
			[
				{
					Files: proc/src/cpp/**/*.cpp,
					IncludeDirectories: [
						sdk.path(java, Identifier: include),
						sdk.path(java, Identifier: include.platform),
						$procjavac[HeaderDirectory],
					],
					SimpleParameters: [ 
						/O2, /GL, /MD 
					],
				},
			],
			SDKs: {
				Java: $javac[JavaSDK],
			},
			CompilerOptions: [
				saker.msvc.coptions.preset(dll),
			],
			Architecture: $target[arch],
		)
		$clink = saker.msvc.clink(
			$ccompile,
			LinkerOptions: [
				saker.msvc.coptions.preset(dll),
			],
			SimpleParameters: [ "/OPT:ICF", /LTCG ],
			Identifier: "NativeProcess.{ $target[id] }",
		)
	}: [ $clink[OutputPath]  ]
	
}
export(
	in compile = include(compile),
	out compile,
	out mainjar,
	out apijar,
	out impljar,
	out sourcejar,
	out procjar,
	
	out bundlepaths = [
		$mainjar[Path],
		$apijar[Path],
		$impljar[Path],
		$sourcejar[Path],
		$procjar[Path],
	]
) {
	$mainjar = saker.jar.create(
		Output: saker.msvc.jar,
		Resources: [
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/msvc/main/**,
			},
			{
				Directory: main/resources/,
				Resources: **,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.msvc-v{ global(VERSION_saker.msvc) }",
				Nest-Bundle-Source: "saker.msvc-sources-v{ global(VERSION_saker.msvc) }",
			},
		},
	)
	$apijar = saker.jar.create(
		Output: saker.msvc-api.jar,
		Resources: [
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/msvc/api/**,
			},
			{
				Directory: api/resources/,
				Resources: **,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.msvc-api-v{ global(VERSION_saker.msvc) }",
				Nest-Bundle-Source: "saker.msvc-sources-v{ global(VERSION_saker.msvc) }",
			},
		},
	)
	$impljar = saker.jar.create(
		Output: saker.msvc-impl.jar,
		Resources: [
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: saker/msvc/impl/**,
			},
			{
				Directory: impl/resources/,
				Resources: **,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.msvc-impl-v{ global(VERSION_saker.msvc) }",
				Nest-Bundle-Source: "saker.msvc-sources-v{ global(VERSION_saker.msvc) }",
			},
		},
	)
	$sourcejar = saker.jar.create(
		Output: saker.msvc-sources.jar,
		Resources: [
			{
				Directory: [src/main/, proc/src/java/, proc/src/cpp/],
				Resources: [**/*.java, **/*.cpp],
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.msvc-sources-v{ global(VERSION_saker.msvc) }",
			},
		},
	)
	$procjar = saker.jar.create(
		Output: saker.msvc-proc.jar,
		Resources: [
			{
				Directory: $compile[procjavac][ClassDirectory],
				Resources: **,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		] + $compile[procdllpaths],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.msvc-proc-v{ global(VERSION_saker.msvc) }",
				Nest-Bundle-Source: "saker.msvc-sources-v{ global(VERSION_saker.msvc) }",
			},
		},
	)
}
install() {
	$export = include(export)
	nest.local.install($export[bundlepaths])
}
upload(){
	$export = include(export, Path: saker.build)
	include(Path: secret/secrets.build)
	nest.server.upload(
		Bundles: $export[bundlepaths],
		APIKey: global(saker.msvc.UPLOAD_API_KEY),
		APISecret: global(saker.msvc.UPLOAD_API_SECRET),
		Overwrite: true,
	)
}
test(
){
	$testapi = include(_testapicompile, enabled: true)
	$export = include(export, compile: include(compile, testapicompile: $testapi))
	
	$testcompile = saker.java.compile(
		SourceDirectories: [
			test/src/,
		],
		ClassPath: [
			$testapi[javac],
			saker.java.classpath.bundle([
				"saker.build-test-runner-v{ static(VERSION_saker.build) }",
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
				"saker.nest-test-utils-v{ static(VERSION_saker.nest )}"
			]),
		],
		Identifier: saker.msvc-tests,
	)
	
	$resolveddependencies = nest.dependency.resolve(
		global(DEPENDENCIES_saker.msvc),
		Filters: nest.dependency.filter.kind(classpath)
	)
	
	$test = saker.java.test(
		TestRunnerClassPath: [
			saker.java.classpath.bundle("saker.build-test-runner-v{ static(VERSION_saker.build) }"),
		],
		ClassPath: [
			$testapi[javac], 
		],
		DependencyClassPath: [
			$export[compile][javac],
		],
		TestInvokerClass: testing.saker.SakerJavaTestingInvoker,
		TestClassPath:	[
			$testcompile[ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
				"saker.nest-test-utils-v{ static(VERSION_saker.nest )}",
			]),
		],
		TestClasses: [
			testing.saker.msvc.**.*Test
		],
		NonDeterministicTests: [
			**,
		],
		TestClassParameters: {
			**: {
				RepositoryJarPath: nest.bundle.localize("saker.nest-test-v{ static(VERSION_saker.nest) }")[BundleLocalPaths][0],
				RepositoryParameterBundles: "{ 
						foreach $path in $export[bundlepaths]: "{ std.file.mirror($path) };" 
					};{
						foreach $path in nest.bundle.localize($resolveddependencies)[BundleLocalPaths]: ";{ $path }"
					}",
			}
		},
		TestInvokerParameters: {
			SakerJarPath: std.file.mirror($testapi[instrumentedjar]),
			TimeoutMillis: 120000,
			TestsBaseBuildDirectory: std.file.mirror.path(std.file.place(test/build)),
		},
		IgnoreFileChanges: [
			std.file.place(test/build),
		],
		#ProcessJVMParameters: [ "-agentlib:jdwp=transport=dt_socket,address=localhost:5432,server=y,suspend=y,quiet=y" ],
		MaxJVMCount: 1,
		FailFast: true,
		AbortOnFail: true,
		Verbose: true,
	)
}

_testapicompile(
	in enabled = false,
	out enabled,
	out javac,
	out instrumentedjar,
){
	$instrumentedjar = nest.test.instrument(
		nest.bundle.download("saker.build-test-v{ static(VERSION_saker.build) }")[BundlePaths][0],
		NestVersion: static(VERSION_saker.nest),
	)
	$javac = saker.java.compile(
		SourceDirectories: [
			testapi/common/,
			$enabled ? testapi/enabled/ : testapi/disabled/,
		],
		ClassPath: [
			$instrumentedjar,
		],
		Identifier: "testapi-{ $enabled ? enabled : disabled }",
	)
}